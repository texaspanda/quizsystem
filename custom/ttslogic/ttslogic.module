<?php

/**
 * @file
 * Contains ttslogic.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\opigno_module\Entity\OpignoModule;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;


/**
 * Implements hook_mail().
 **/
function ttslogic_mail($key, &$message, $params) {
  $options = [
    'langcode' => $params['langcode'],
  ];
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  switch ($key) {
    case 'ttslogic_email_test_submit':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $subject = t('Thanks for passing test. Results of @user will be evaluated ASAP.', array('@user' => $params['user']), $options);
      $message['to'] = $params['user_email'];
      $message['subject'] = $subject;
      $message['body'][] = Markup::create('<p>Thanks for your answers!</p><p>AnyforSoft team will check your answers ASAP :)</p>');
      $message['title'] = 'Submitted results';
      break;
    case 'ttslogic_email_to_hr_after_test':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['to'] = $params['admin_email'];
      $message['body'][] = t('Candidate @user finished testing. There is a link to check results: @link', array('@user' => $params['user'], '@link' => $params['evaluate_link']), $options);
      $message['subject'] = Markup::create(t('User @user finished testing. Need to evaluate results.', array('@user' => $params['user']), $options));
      $message['title'] = 'Finish testing';
      break;
    case 'ttslogic_email_candidate_evaluate':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['to'] = $params['email'];
      $message['body'][] = Markup::create(t('<p>Hi, @firstname @lastname</p> <p>We are glad to inform that your test to Anyforsoft was evaluated.</p> <p>Your score is @scorepercents % from 100%. So, in general, your current knowledge is on @reallevel level.</p><p>We will contact you as soon as possible to discuss the next steps.</p><p>Best Regards,<br>Anyforsoft team.</p>',array('@firstname' => $params['first_name'],'@lastname' => $params['last_name'],'@level' => $params['level'], '@reallevel' => $params['real_level'], '@scorepercents' => $params['score_percent'], '@role' => $params['role']), $options));
      $message['subject'] = t('@firstname @lastname, your answers was checked', array('@firstname' => $params['first_name'], '@lastname' => $params['last_name']), $options);
      $message['title'] = 'Results evaluated';
      break;
    case 'ttslogic_email_hr_evaluate':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['to'] = $params['admin_email'];
      $message['body'][] = Markup::create(t('<p>Results of @level @role  <b>@firstname @lastname</b> test was evaluated.</p> <p>Score: @scorepercents percents (Level: @reallevel)</p>', array('@firstname' => $params['first_name'],'@lastname' => $params['last_name'],'@level' => $params['level'], '@reallevel' => $params['real_level'], '@scorepercents' => $params['score_percent'], '@role' => $params['role']), $options));
      $message['subject'] = 'Test evaluated';
      $message['title'] = 'Evaluate';
      break;
    case 'ttslogic_email_candidate_generate':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['to'] = $params['user_email'];
      $link = \Drupal::request()->getSchemeAndHttpHost();
      $url = Url::fromUri($link);
      $link_out = Link::fromTextAndUrl($link, $url)->toString();
      $message['body'][] = Markup::create(t('<p>Account info:</p> <p><b>Login:</b> @login<br><b>Password:</b> @password</p>', array('@login' => $params['login'],'@password' => $params['password']), $options) . $link_out);
      $message['subject'] = 'Account created';
      $message['title'] = 'Evaluate';
      break;
    case 'ttslogic_email_candidate_by_only_tests':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['to'] = $params['user_email'];
      $body = '<p>Itâ€™s results of one part of the test. You score by only tests is ' . $params['score'] . '%</p><p>Total results will be soon</p>';
      $message['body'][] = Markup::create($body);
      $message['subject'] = t('Thanks for passing test.');
      $message['title'] = 'Results evaluated';
      break;
  }
}

/**
 * Get a info about user account and send emails after evaluating results.
 *
 * Callback for ttslogic_form_opigno_module_result_form_alter().
 */
function ttslogic_evaluate_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();
  $candidate = $build_info['args']['1']->getOwner();
  if($candidate->hasRole('be_candidate')) {
    $level_term_tid = $candidate->get('field_level')->target_id;
    $role_term_tid = $candidate->get('field_role')->target_id;
    $candidate_firstname = $candidate->get('field_first_name')->value;
    $candidate_lastname = $candidate->get('field_last_name')->value;
    $candidate_level = Term::load($level_term_tid)->getName();
    $candidate_role = Term::load($role_term_tid)->getName();
    $candidate_email = $candidate->getEmail();
    $score_percents = $build_info['args']['1']->getScore();
    $max_score = $build_info['args']['1']->getMaxScore();
    $candidate_score = round($score_percents * ($max_score / 100) / 5) * 5;
    $admin = \Drupal\user\Entity\User::load('1');
    $admin_email = $admin->getEmail();
    if($score_percents < 35) {
      $candidate_real_level = 'Junior';
    }
    elseif($score_percents > 34 && $score_percents <= 50) {
      $candidate_real_level = 'Upper Junior';
    }
    elseif($score_percents > 49 && $score_percents < 86) {
      $candidate_real_level= 'Middle';
    }
    elseif($score_percents > 85) {
      $candidate_real_level = 'Senior';
    }
    $params = [
      'langcode' => 'en',
      'first_name' => $candidate_firstname,
      'last_name' => $candidate_lastname,
      'role' => $candidate_role,
      'level' => $candidate_level,
      'real_level' => $candidate_real_level,
      'score' => $candidate_score,
      'score_percent' => $score_percents,
      'email' => $candidate_email,
      'max_score' => $max_score,
      'admin_email' => $admin_email,
    ];
    $mail_manager = \Drupal::service('plugin.manager.mail');
    $params['langcode'] = \Drupal::currentUser()->getPreferredLangcode();
    $module = "ttslogic";
    $key = "ttslogic_email_candidate_evaluate";
    $send = TRUE;
    $mail_manager->mail($module, $key, $candidate_email, 'en', $params, NULL, $send);
    $key = "ttslogic_email_hr_evaluate";
    $mail_manager->mail($module, $key, $admin_email, 'en', $params, NULL, $send);
  }
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function ttslogic_form_opigno_module_result_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'ttslogic_evaluate_submit';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ttslogic_preprocess_page(&$variables) {
  $current_path = \Drupal::request()->getPathInfo();
  $current_user_info = \Drupal::currentUser();
  $user_ip =  \Drupal::request()->getClientIp();
  $current_user_roles = $current_user_info->getRoles();
  $current_user_uid = $current_user_info->id();

  // Send message to candidate if he was banned and redirected to login page.
  if (isset($_GET["query"]["testing"]) && \Drupal::service('path.matcher')->isFrontPage()) {
    $message = 'Thanks for passing the test. Results will be evaluated ASAP. And will be sent to your email';
    \Drupal::messenger()->addMessage($message);
  }

  // Insert timestamp (if it's doesn't exist already) of start testing and timestamp of finishing into database when candidate starts testing.
  if (strpos($current_path, '/module/') &&
    strpos($current_path, '/answer/') &&
    in_array('be_candidate', $current_user_roles)) {
    $user_module_status_array = \Drupal::entityTypeManager()
      ->getStorage('user_module_status')
      ->loadByProperties(['user_id' => $current_user_uid]);
    $user_module_status = reset($user_module_status_array);
    $timestamp_start = $user_module_status->get('started')->value;
    $query = \Drupal::database()->select('user_module_start_time', 'umt');
    $query->addField('umt', 'user_id');
    $query->addField('umt', 'start_time');
    $query->condition('umt.user_id', $current_user_uid);
    $query_result = $query->execute()->fetchObject();
    if (empty($query_result)) {
      db_insert('user_module_start_time')
        ->fields(
          [
            'user_id' => $current_user_uid,
            'start_time' => $timestamp_start,
            'finish_time' => $timestamp_start + 1800,
            'block_status' => 0,
            'ip' => $user_ip,
          ]
        )->execute();
    }
  }

  // Block candidate account on page with results of test if he passed the test in 30 minutes.
  // Send email to hr and candidate with notification about passing test.
  if (strpos($current_path, '/result') &&
    !in_array('administrator', $current_user_roles)) {
    $path = explode('/', $current_path);

    //It means testing Drupal camp and it need only for this.
    $score =FALSE;
    $module_id = $path[2];
    if ($module_id == 4) {
      $opigno_module = OpignoModule::load($path[2]);
      $score = ttslogic_get_user_module_score($opigno_module, $current_user_info);
    }
    $current_user = \Drupal\user\Entity\User::load($current_user_info->id());
    $current_user->block();
    $current_user->save();
    $mail_manager = \Drupal::service('plugin.manager.mail');
    $username = $current_user->getAccountName();
    $to = $current_user->getEmail();
    $module = "ttslogic";
    $langcode = 'en';
    $admin = \Drupal\user\Entity\User::load('1');
    $admin_email = $admin->getEmail();
    $params['langcode'] = \Drupal::currentUser()->getPreferredLangcode();
    $params['user'] = $username;
    $params['admin_email'] = $admin_email;
    $params['user_email'] = $current_user->getEmail();
    $key = "ttslogic_email_to_hr_after_test";
    $link = \Drupal::request()->getSchemeAndHttpHost();
    $new = str_replace('result', 'results', $current_path);
    $url = Url::fromUri($link . $new);
    $link_out = Link::fromTextAndUrl('Evaluate', $url)->toString();
    $params['evaluate_link'] = $link_out;
    $mail_manager->mail($module, $key, $langcode, $to, $params, NULL, TRUE);
    if ($score) {
      $key = "ttslogic_email_candidate_by_only_tests";
      $params['score'] = $score;
      $mail_manager->mail($module, $key, $langcode, $to, $params, NULL, TRUE);
    }
    else {
      $key = "ttslogic_email_test_submit";
      $mail_manager->mail($module, $key, $to, $langcode, $params, NULL, TRUE);
    }
    $url = Url::fromRoute('<front>', array('query' => array('testing' => 'over')));
    $response = new RedirectResponse($url->toString());
    $response->send();
  }
  if (
    \Drupal::service('path.matcher')->isFrontPage() &&
    !in_array('administrator', $current_user_roles)
  ) {
    $name_one = 'custom_sub_dashboard_views_block_opigno_notifications-block_unread_dashboard';
//    unset ($variables["page"]["content"][$name_one]);
    $variables["page"]["content"][$name_one] = ['#markup'];
    $name_one = 'custom_sub_dashboard_views_block_opigno_calendar-month_block';
    $variables["page"]["content"][$name_one] = ['#markup'];
  }
}

/**
 * Implements theme_preprocess_block().
 */
function ttslogic_preprocess_block(&$variables) {
  $bids = [
    'opigno_calendar-month_block',
    'opigno_notifications-block_unread_dashboard',
  ];
  $user = \Drupal::currentUser();
  $roles = $user->getRoles();
 if (
   !in_array('administrator', $roles) &&
   in_array($variables["derivative_plugin_id"], $bids)
 ) {
   $variables["content"] = [];
   $variables["label"] = [];
 }
}
/**
 * Implements hook_js_alter().
 */
function ttslogic_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  unset($javascript['sites/default/files/h5p/libraries/H5P.JoubelUI-1.3/js/joubel-score-bar.js']);
}

/**
 * Implements hook_views_pre_render().
 */
function ttslogic_views_pre_render(ViewExecutable $view) {
  if ($view->id() == "opigno_score_evaluated_list" && $view->current_display == 'evaluated_score') {
    if (!empty($view->result)) {
      foreach ($view->result as $key => $row) {
        $entity = $view->result[$key]->_entity;
        $entity->set('max_score', '100');
        $mid = $entity->get('module')->target_id;
        $uid = $entity->get('user_id')->target_id;
        $account = User::load($uid);
        $opigno_module = OpignoModule::load($mid);
        $score = ttslogic_get_user_module_score( $opigno_module,  $account);
        $entity->set('score', $score);
      }
    }
  }
}

/**
 * Implements opigno_module_get_user_module_score().
 *
 * @param \Drupal\opigno_module\Entity\OpignoModule $opigno_module
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return integer
 *   Score in percents depends of OpignoModule keep_results option.
 */
function ttslogic_get_user_module_score(OpignoModule $opigno_module, $account) {
  $which_score_keep = $opigno_module->getKeepResultsOption();
//  $attempts = $opigno_module->getModuleAttempts($account);
  $status_storage = \Drupal::entityTypeManager()->getStorage('user_module_status');
  $query = $status_storage->getQuery();
  $module_statuses = $query
    ->condition('module', $opigno_module->id())
    ->condition('user_id', $account->id())
    ->execute();
  $attempts = $status_storage->loadMultiple($module_statuses);
  if (!$attempts) {
    return 0;
  }
  /* @var \Drupal\opigno_module\Entity\UserModuleStatus $last_attempt */
  $last_attempt = end($attempts);
  $score = 0;
  switch ($which_score_keep) {
    // The newest score always saved in last attempt.
    case 'newest':
      $score = (int) $last_attempt->getScore();
      break;

    // For these options get best score.
    case 'best':
    case 'all':
      $score = (int) $last_attempt->calculateBestScore();
      break;

  }
  return $score;
}
